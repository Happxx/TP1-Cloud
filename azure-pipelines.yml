trigger:
  branches:
    include:
      - master  # Déclenche le pipeline sur les modifications de la branche principale

pool:
  name: 'Default'  # Utilisation de l'agent auto-hébergé

variables:
  azureSubscription: 'Azure subscription 1'
  resourceGroupNameKeyVault: 'KeyVaultResourceGroup'
  resourceGroupNameScaleSet: 'ScaleSetResourceGroup'
  location: 'EastUS'
  keyVaultName: 'TP1-KeyVault-$(Build.BuildId)'  # Nom unique pour le Key Vault
  secretName: 'adminPassword'

steps:
- checkout: self  # Clonage du dépôt

# Étape 1 : Créer le groupe de ressources pour le Key Vault
- task: AzureCLI@2
  displayName: 'Créer le groupe de ressources pour le Key Vault'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group create --name $(resourceGroupNameKeyVault) --location $(location)

# Étape 2 : Déployer le Key Vault
- task: AzureCLI@2
  displayName: 'Déployer le Key Vault'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az keyvault create --name $(keyVaultName) --resource-group $(resourceGroupNameKeyVault) --location $(location) --enable-rbac-authorization

# Étape 3 : Attribuer le rôle temporaire "Utilisateur des secrets du Key Vault"
- task: AzureCLI@2
  displayName: 'Attribuer le rôle Utilisateur des secrets du Key Vault'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $servicePrincipalObjectId = "$(AZURE_CLIENT_ID)"
      az role assignment create --role "Key Vault Secrets User" --assignee-object-id $servicePrincipalObjectId --assignee-principal-type "ServicePrincipal" --scope "/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroupNameKeyVault)/providers/Microsoft.KeyVault/vaults/$(keyVaultName)"

# Étape 4 : Ajouter un secret dans le Key Vault
- task: AzureCLI@2
  displayName: 'Ajouter un secret dans le Key Vault'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $password = -join ((1..16) | ForEach-Object { (65..90) + (97..122) + (48..57) | Get-Random | % {[char]$_} })
      az keyvault secret set --vault-name $(keyVaultName) --name $(secretName) --value $password

# Étape 5 : Retirer le rôle Utilisateur des secrets du Key Vault
- task: AzureCLI@2
  displayName: 'Retirer le rôle Utilisateur des secrets du Key Vault'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az role assignment delete --role "Key Vault Secrets User" --assignee $(AZURE_CLIENT_ID) --scope "/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroupNameKeyVault)/providers/Microsoft.KeyVault/vaults/$(keyVaultName)"

# Étape 6 : Créer le groupe de ressources pour le Scale Set
- task: AzureCLI@2
  displayName: 'Créer le groupe de ressources pour le Scale Set'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group create --name $(resourceGroupNameScaleSet) --location $(location)

# Étape 7 : Encoder la configuration cloud-init en base64
- task: PowerShell@2
  displayName: "Encoder le fichier cloud-init en base64"
  inputs:
    targetType: 'inline'
    script: |
      $cloudContent = Get-Content -Path "$(Build.SourcesDirectory)\cloud-init.txt" -Raw
      $encodedContent = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($cloudContent))
      Write-Host "##vso[task.setvariable variable=encodedCloudInit;]$encodedContent"

# Étape 8 : Déployer le Scale Set avec le serveur NGINX
- task: AzureResourceManagerTemplateDeployment@3
  displayName: "Déployer le Scale Set avec NGINX"
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: $(azureSubscription)
    subscriptionId: $(subscriptionId)
    action: 'Create Or Update Resource Group'
    resourceGroupName: $(resourceGroupNameScaleSet)
    location: $(location)
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)\azuredeploy.json'
    csmParametersFile: '$(Build.SourcesDirectory)\azuredeploy.parameters.json'
    overrideParameters: '-adminPassword "$(adminPassword)" -customData "$(encodedCloudInit)"'
    deploymentMode: 'Incremental'
